# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.trip import Trip  # noqa: F401,E501
from swagger_server import util


class Capture(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, trip: Trip=None, catch_date: date=None, quantity: int=None):  # noqa: E501
        """Capture - a model defined in Swagger

        :param id: The id of this Capture.  # noqa: E501
        :type id: int
        :param trip: The trip of this Capture.  # noqa: E501
        :type trip: Trip
        :param catch_date: The catch_date of this Capture.  # noqa: E501
        :type catch_date: date
        :param quantity: The quantity of this Capture.  # noqa: E501
        :type quantity: int
        """
        self.swagger_types = {
            'id': int,
            'trip': Trip,
            'catch_date': date,
            'quantity': int
        }

        self.attribute_map = {
            'id': 'id',
            'trip': 'trip',
            'catch_date': 'catchDate',
            'quantity': 'quantity'
        }
        self._id = id
        self._trip = trip
        self._catch_date = catch_date
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt) -> 'Capture':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The capture of this Capture.  # noqa: E501
        :rtype: Capture
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Capture.


        :return: The id of this Capture.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Capture.


        :param id: The id of this Capture.
        :type id: int
        """

        self._id = id

    @property
    def trip(self) -> Trip:
        """Gets the trip of this Capture.


        :return: The trip of this Capture.
        :rtype: Trip
        """
        return self._trip

    @trip.setter
    def trip(self, trip: Trip):
        """Sets the trip of this Capture.


        :param trip: The trip of this Capture.
        :type trip: Trip
        """
        if trip is None:
            raise ValueError("Invalid value for `trip`, must not be `None`")  # noqa: E501

        self._trip = trip

    @property
    def catch_date(self) -> date:
        """Gets the catch_date of this Capture.


        :return: The catch_date of this Capture.
        :rtype: date
        """
        return self._catch_date

    @catch_date.setter
    def catch_date(self, catch_date: date):
        """Sets the catch_date of this Capture.


        :param catch_date: The catch_date of this Capture.
        :type catch_date: date
        """
        if catch_date is None:
            raise ValueError("Invalid value for `catch_date`, must not be `None`")  # noqa: E501

        self._catch_date = catch_date

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Capture.


        :return: The quantity of this Capture.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Capture.


        :param quantity: The quantity of this Capture.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity
